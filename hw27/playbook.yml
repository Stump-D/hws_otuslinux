---
- name:  Config pgservers
  hosts: pgservers
  become: yes
  vars:
    postgresql_repo: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    packages:
      - postgresql11
      - postgresql11-server
      - postgresql11-contrib
      - python-psycopg2
      - unzip

  tasks:
    - name: Install epel-release
      yum:
        name: epel-release
        state: present

    - name: Install PostgreSQL repo
      yum:
        name: "{{ postgresql_repo }}"
        state: present

    - name: Install PostgreSQL packages
      package:
        name: "{{ packages }}"
        state: present

- name:  Config master
  hosts: master
  become: yes

  tasks:
    - name: PostgreSQL database init
      command: "{{ postgresql_bin_path }}/postgresql-11-setup initdb"
      args:
        creates: "{{ postgresql_data_dir }}/PG_VERSION"
    
    - name: Copy config files on master
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: postgres
        group: postgres
        mode: 0600
      with_items:
        - { src: 'templates/master/pg_hba.conf.j2', dest: '{{ postgresql_data_dir }}/pg_hba.conf'} 
        - { src: 'templates/master/postgresql.conf.j2', dest: '{{ postgresql_data_dir }}/postgresql.conf'} 

    - name: Start firewalld
      systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Enable remote connections to postgresql service by firewalld
      firewalld:
        service: postgresql
        permanent: yes
        state: enabled
        immediate: yes
              
    - name: Run PostgreSQL
      systemd:
        name: "{{ postgresql_service }}"
        state: started
        enabled: yes

    - name: Create physical slot for replication if doesn't exist
      become_user: postgres
      postgresql_slot:
        slot_name: "{{ physical_replication_slot }}"

    - name: Create database users
      postgresql_user:
        db: postgres
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        role_attr_flags: "{{ item.flags }}"
      become: yes
      become_user: postgres
      with_items:
        - { name: "{{ replica_username }}", password: "{{ replica_password }}", flags: REPLICATION,LOGIN}
        - { name: "{{ barman_username }}", password: "{{ barman_password }}", flags: SUPERUSER}
        - { name: "{{ streaming_barman }}", password: "{{ streaming_barman_password }}", flags: REPLICATION,LOGIN}
        
    - name: Remove demo database if exists
      postgresql_db:
        name: demo
        state: absent
      become: yes
      become_user: postgres
   
    - name: Get demo database
      unarchive:
        src: https://edu.postgrespro.ru/demo_small.zip
#        src: demo_small.zip
        dest: /var/tmp
        remote_src: yes

    - name: Load demo database
      become: yes 
      become_user: postgres
      shell: psql -f /var/tmp/demo_small.sql

  handlers:
    - include: handlers/all.yml

- name:  Config slave
  hosts: slave
  become: yes

  tasks:
    - name: Remove current database
      become: yes
      become_user: postgres
      file:
        path: "{{ postgresql_data_dir }}"
        state: absent

    - name: Run pg_basebackup
      become_user: postgres
      become: yes
      shell: /usr/pgsql-11/bin/pg_basebackup -D {{ postgresql_data_dir }} --write-recovery-conf --wal-method=stream --checkpoint=fast --host={{ master_ip }} --user={{ replica_username }} --slot='{{ physical_replication_slot }}'
      notify: Restart PostgreSQL

    - name: Copy config files on slave
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: postgres
        group: postgres
        mode: 0600
      with_items:
        - { src: 'templates/slave/pg_hba.conf.j2', dest: '{{ postgresql_data_dir }}/pg_hba.conf'}
        - { src: 'templates/slave/postgresql.conf.j2', dest: '{{ postgresql_data_dir }}/postgresql.conf'}
      notify: Reload PostgreSQL

  handlers:
    - include: handlers/all.yml

- name:  Config backup
  hosts: backup
  become: yes
  vars:
    postgresql_repo: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    packages:
      - postgresql11
#      - postgresql11-server
#      - postgresql11-contrib
      - barman
    barman_stream_slot: master
  
  tasks:
    - name: Install epel-release
      yum:
        name: epel-release
        state: present

    - name: Install PostgreSQL repo
      yum:
        name: "{{ postgresql_repo }}"
        state: present

    - name: Get 2ndQuadrant repo
      get_url:
        url: https://dl.2ndquadrant.com/default/release/get/11/rpm
        dest: /vagrant/2ndQuadrant.sh
        mode: 0755
    
    - name: Install 2ndQuadrant repo
      shell: bash /vagrant/2ndQuadrant.sh

    - name: Install packages
      yum:
        name: '{{ packages }}'
        state: present

    - name: Copy config files on backup
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - { src: 'templates/backup/barman.conf.j2', dest: '/etc/barman.conf'}
        - { src: 'templates/backup/master.conf.j2', dest: '/etc/barman.d/master.conf'}

    - name: Create replication slot for backup
      become_user: "{{ barman_username }}"
      command: barman receive-wal --create-slot "{{ barman_stream_slot }}"
      ignore_errors: yes

    - name: Verification of WAL archiving configuration
      become_user: "{{ barman_username }}"
      shell: |
        barman switch-wal --force --archive --archive-timeout 60 "{{ barman_stream_slot }}"
        barman switch-wal --force --archive --archive-timeout 60 "{{ barman_stream_slot }}"
      ignore_errors: yes